#!/usr/bin/env python3
#
# Lookup table generator for Concentration Room
# Copyright 2010 Damian Yerrick
#
# Copying and distribution of this file, with or without
# modification, are permitted in any medium without royalty
# provided the copyright notice and this notice are preserved.
# This file is offered as-is, without any warranty.
#
from __future__ import with_statement, division, print_function
import sys

NTSCClockFreq = 3579545
PALClockFreq = 3546895

def generatePeriodTable (filename, maxoctave=8, pal=False):
    etfrequencies = [110 * (1.05946**i) for i in range(12*maxoctave)]
    etperiods = [round((PALClockFreq if pal else NTSCClockFreq) / (etfrequencies[i] * 32)) for i in range(12*maxoctave)]
    systemName = "PAL" if pal else "NTSC"
    with open(filename, 'wt') as outfp:
        outfp.write(""";==============================================================
; WLA-DX banking setup
;==============================================================

.rombankmap
bankstotal 1
banksize $8000
banks 1
.endro

.section 'sn7PeriodTable' align 256 free
; %s SMS period table generated by Nikku4211's makenotetable.py
periodTableLo:\n"""
                    % systemName)
        for i in range(maxoctave):
            outfp.write('  .db '
                        + ','.join('$%02x' % ((i % 16)+128)
                                   for i in etperiods[i*12:(i*12)+12])
                        + '\n')
        outfp.write('periodTableHi:\n')
        for i in range(maxoctave):
            outfp.write('  .db '
                        + ','.join('$%02x' % (i >> 4)
                                   for i in etperiods[i*12:(i*12)+12])
                        + '\n')
        outfp.write(""".ends""")
    
    return etperiods
    
def generatePALPeriodTable(filename):
    return generatePeriodTable(filename, pal=True)

tableNames = {
    'period': generatePeriodTable,
    'palperiod': generatePALPeriodTable
}

def main(argv):
    if len(argv) >= 2 and argv[1] in ('/?', '-?', '-h', '--help'):
        print("usage: %s TABLENAME FILENAME" % argv[0])
        print("known tables:", ' '.join(sorted(tableNames)))
    elif len(argv) < 3:
        print("mktables: too few arguments; try %s --help" % argv[0],
              file=sys.stderr)
        sys.exit(1)
    elif argv[1] in tableNames:
        tableNames[argv[1]](argv[2])
    else:
        print("mktables: no such table %s; try %s --help" % (argv[1], argv[0]),
              file=sys.stderr)
        sys.exit(1)
    

if __name__=='__main__':
    main(sys.argv)